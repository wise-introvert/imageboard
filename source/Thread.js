import createByIdIndex from './utility/createByIdIndex'
import getInReplyToPostIds from './getInReplyToPostIds'
import setReplies from './setReplies'
import generateThreadTitle from './generateThreadTitle'
import { generatePostLinksAndUpdatePreview, addParseContent } from './parseContent'

export default function Thread(thread, comments, {
	boardId,
	messages,
	generatedQuoteMaxLength,
	generatedQuoteMinFitFactor,
	generatedQuoteMaxFitFactor,
	generatedQuoteNewLineCharacterLength,
	commentLengthLimit,
	commentUrlParser,
	expandReplies,
	parseContent,
	addParseContent: shouldAddParseContent,
	parseCommentContent
}, board) {
	thread.boardId = boardId
	if (board) {
		thread.board = board
	}
	// Remove `false` properties.
	if (!thread.isSticky) {
		delete thread.isSticky
	}
	if (!thread.isLocked) {
		delete thread.isLocked
	}
	if (!thread.isRolling) {
		delete thread.isRolling
	}
	if (thread.tags === undefined) {
		delete thread.tags
	}
	if (board && board.bumpLimit && thread.commentsCount >= board.bumpLimit) {
		thread.isBumpLimitReached = true
	}
	// On `8ch.net` "rolling" "sticky" threads are
	// also marked as `bumplimit: 1` when their
	// technical "bump limit" is technically "reached".
	// By definition, "rolling" and "sticky" threads don't expire.
	if (thread.isSticky || thread.isRolling) {
		if (thread.isBumpLimitReached) {
			thread.isBumpLimitReached = false
		}
	}
	// `Array.find()` is slow for doing it every time.
	// A "get post by id" index is much faster.
	const getCommentById = createByIdIndex(comments)
	// Set `.inReplyTo` array for each comment.
	// `.inReplyTo` array contains comment IDs.
	for (const comment of comments) {
		let inReplyTo = getInReplyToPostIds(comment, {
			boardId,
			threadId: thread.id,
			commentUrlParser,
			parseContent
		})
		if (inReplyTo) {
			// Prevent circular references.
			// http://boards.4chan.org/gif/thread/15873661
			// One time there was a thread on `4chan` where a user
			// somehow managed to quote their own comment recursively:
			// A comment with id "15873666" had ">>15873666" in its content.
			// To prevent such cyclic links this expclicit "not a link to self"
			// filter is applied, even though such things can't normally happen.
			inReplyTo = inReplyTo.filter(commentId => commentId !== comment.id)
			// Some comments may have been removed by moderators.
			// Classify "in reply to" comments into existing and removed ones.
			const inReplyToComments = []
			const inReplyToRemovedCommentIds = []
			for (const commentId of inReplyTo) {
				const comment = getCommentById(commentId)
				if (comment) {
					inReplyToComments.push(comment)
				} else {
					inReplyToRemovedCommentIds.push(commentId)
				}
			}
			if (inReplyToComments.length > 0) {
				comment.inReplyTo = expandReplies ? inReplyToComments : inReplyToComments.map(_ => _.id)
			}
			if (inReplyToRemovedCommentIds.length > 0) {
				comment.inReplyToRemoved = inReplyToRemovedCommentIds
			}
		}
	}
	// Set `.replies` array for each comment
	// based on the `.inReplyTo` array.
	// `.replies` array contains comment IDs.
	// Can only come after `.inReplyTo` arrays are set on comments.
	setReplies(comments, { expandReplies })
	for (const comment of comments) {
		if (parseContent === false) {
			if (shouldAddParseContent) {
				addParseContent(comment, {
					boardId,
					threadId: thread.id,
					parseCommentContent,
					getCommentById,
					messages,
					generatedQuoteMaxLength,
					generatedQuoteMinFitFactor,
					generatedQuoteMaxFitFactor,
					generatedQuoteNewLineCharacterLength,
					commentLengthLimit,
					expandReplies
				})
				// Also call `generateThreadTitle()` after
				// the "opening" comment's `.parseContent()`.
				if (comment.id === thread.id) {
					const parseContent = comment.parseContent
					comment.parseContent = () => {
						parseContent()
						generateThreadTitle(thread, {
							messages
						})
					}
				}
			}
		}
		// If the comment has any content and `parseContent` is not `false`
		// (in which case `comment.content` has already been parsed)
		// then create autogenerated content (such as "in reply to" quotes) right now.
		// Otherwise, defer until `post.parseContent()` is called.
		else if (comment.content) {
			generatePostLinksAndUpdatePreview(comment, {
				threadId: thread.id,
				getCommentById,
				messages,
				generatedQuoteMaxLength,
				generatedQuoteMinFitFactor,
				generatedQuoteMaxFitFactor,
				generatedQuoteNewLineCharacterLength,
				commentLengthLimit
			})
		}
	}
	// The date on which the thread was created.
	// All chans except `lynxchan` have this.
	// `lynxchan` doesn't have it which is a bug
	// but seems like they don't want to fix it.
	if (comments[0].createdAt) {
		thread.createdAt = comments[0].createdAt
	}
	thread.comments = comments
	// If `thread.title` is missing then either copy it
	// from the first comment's `title` or attempt to
	// autogenerate it from the first comment's `content`.
	generateThreadTitle(thread, {
		messages,
		parseContent
	})
	return thread
}
const RANDOM_NON_COLORED_NAME_REGEXP = /^Аноним&nbsp;ID:&nbsp;([^<]+)$/
const AUTHOR_ID_REGEXP = /^Аноним&nbsp;ID:&nbsp;<span id="id_tag_([a-f0-9]+)" style="color:rgb\((\d+),(\d+),(\d+)\);">([^<]+)<\/span>$/

export default function parseAuthor(name, { defaultAuthorName, boardId }) {
	// `makaba` engine allows whitespace author name.
	name = name.trim()
	if (!name) {
		return
	}
	// "Anonymous&nbsp;" -> "Anonymous".
	// (`/int/` on `2ch.hk`)
	name = name.replace(/&nbsp;$/, '')
	// `Аноним`
	if (name === defaultAuthorName) {
		return
	}
	// On `/d/` and `/po/` boards sometimes there're such names.
	// `Аноним&nbsp;ID:&nbsp;Heaven`
	const randomNonColoredNameMatch = name.match(RANDOM_NON_COLORED_NAME_REGEXP)
	if (randomNonColoredNameMatch) {
		return randomNonColoredNameMatch[1]
	}
	// On `/d/` and `/po/` boards names are autogenerated from IP address hash.
	// `Аноним&nbsp;ID:&nbsp;<span id=\"id_tag_7ab0a33a\" style=\"color:rgb(116,48,218);\">Насмешливый&nbsp;Обеликс</span>`
	const authorIdMatch = name.match(AUTHOR_ID_REGEXP)
	if (authorIdMatch) {
		return {
			id: authorIdMatch[1],
			// color: `rgb(${authorIdMatch[2]}, ${authorIdMatch[3]}, ${authorIdMatch[4]})`,
			color: rgbToHex(parseInt(authorIdMatch[2]), parseInt(authorIdMatch[3]), parseInt(authorIdMatch[4])),
			name: authorIdMatch[5].replace('&nbsp;', ' ')
		}
	}
	return name
}

function rgbToHex(r, g, b) {
	return `#${colorComponentToHex(r)}${colorComponentToHex(g)}${colorComponentToHex(b)}`
}

function colorComponentToHex(number) {
	const hex = number.toString(16)
	return hex.length === 1 ? '0' + hex : hex
}